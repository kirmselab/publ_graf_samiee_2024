%% This script re-applies UFARSA (with different detection parameters)
% on *_events.mat files generated by a previous execution of CATHARSiS
% ("Calcium transient detection harnessing spatial similarity").
% ----------------------------------------------------------------------
% Reference:
% JÃ¼rgen Graf, Vahid Rahmati, Myrtill Majoros, Otto W. Witte, Christian Geis,
% Stefan J. Kiebel, Knut Holthoff, Knut Kirmse. (2021) Network instability
% dynamics drive a transient bursting period in the developing hippocampus
% in vivo. bioRxiv. doi.org/10.1101/2021.05.28.446133
% ======================================================================
% Use:
% (1) Set parameters in section "Specify parameters".
% (2) >> redoUFARSA
% ----------------------------------------------------------------------
% Note: UFARSA will be re-applied to all '*_events.mat' files in the
% selected folder. For each of these files, one TXT and one MAT file are
% saved in the same folder (as is the case for 'runCATHARSiS.m').
% ======================================================================
% Help:
% Please see "CATHARSiS_User_Manual.pdf".
% ======================================================================
%
%% Specify parameters
clear variables; close all;
% ******************************************************************************************************
% Parameters I
% ******************************************************************************************************
NEW_UFARSA.directory = 'C:\My folder\'; % folder containing '*events.mat' files to be re-analyzed
% ******************************************************************************************************
% Parameters II: UFARSA (for the rest of parameters, see "internal_parameters.m" file)
% ******************************************************************************************************
NEW_UFARSA.scale_NoiseSTD = 3.25;     % Leading-threshold scaling constant (by default 2.25). 
%                                     % We strongly recommended to estimate this parameter easily from a couple of you fluorescence traces (see user_guide.pdf
%                                     % file). Following this estimation, we recommend to set the " opt.min_leading_amp = 0 " in the "internal_parameters.m" 
%                                     % file, in order to remove the internally determined lower-bound used for this threshold.
NEW_UFARSA.remove_drifts         = 1; % 1: remove slowly varying drifts, 0: skip the drift removal step
NEW_UFARSA.remove_posDeflections = 0; % 1: apply large-impulse (deflection) removal step, 0:skip this step
NEW_UFARSA.remove_negDeflections = 1; % 1: remove large short-lasting negative deflections, 0:skip this step
NEW_UFARSA.demerging             = 1; % 1 --> apply the demerging step, 0 ---> skip it
%
%% Get file list from folder
NEW_UFARSA.FileList = dir([NEW_UFARSA.directory, '*events.mat']);
NEW_UFARSA.Nfiles = size(NEW_UFARSA.FileList, 1);
for y = 1:NEW_UFARSA.Nfiles
    %% load file
    clearvars -except NEW_UFARSA y
    NEW_UFARSA.runningNumberFile = y;
    load([NEW_UFARSA.directory, NEW_UFARSA.FileList(y).name]);
    %% assign new parameter values to opt
    opt.scale_NoiseSTD = NEW_UFARSA.scale_NoiseSTD;
    opt.remove_drifts = NEW_UFARSA.remove_drifts;
    opt.remove_posDeflections = NEW_UFARSA.remove_posDeflections;
    opt.remove_negDeflections = NEW_UFARSA.remove_negDeflections;
    opt.demerging = NEW_UFARSA.demerging;
    %% re-create variables
    NEW_UFARSA.timestamp = datestr(now, 'yymmdd_HHMMSS');
    % clean-up
    clear driftindex finalFrames DETECTION_CRITERION UFARSA_output
    % ----- 'driftindex' -----
    if exist('driftperiods') == 0
        driftindex = false(1, Nframes);
    else
        driftindex = false(1, Nframes);
        for k = 1:size(driftperiods, 1)
            for j = driftperiods(k, 1):driftperiods(k, 2)
                driftindex(1, j) = 1;
            end
        end
    end
    clear j k
    % ----- 'finalFrames' -----
    finalFrames = find(driftindex == 0);
    % ----- 'DETECTION_CRITERION' -----
    DETECTION_CRITERION = NaN(Nframes, Nrois);
    DETECTION_CRITERION(:, finalROIs) = cell2mat(Results_perROI{11, finalROIs});
    % ----- 'UFARSA_output' -----
    UFARSA_output = cell(1, Nrois);
    DETECTION_CRITERION(isnan(DETECTION_CRITERION)) = 0; % UFARSA does not accept NaNs
    opt.which_ROIs = [];
    opt.gen_FR_count = 0;       % 1: generate the estimated firing rate vector based on the reconstructed spike-count train, 0: skip it (by default 0)
    opt.gen_FR_count_dem = 0;   % 1: generate the estimated firing rate vector based on the reconstructed demerged spike-count train, 0: skip it (by default 0)
    opt.FluorFile_name = 'none.non'; % placeholder for UFARSA (see run_UFARSA.m: *_*)
    opt.FluorFile_dir  = options.PathNameTIF;
    opt.samples_randomly = 0; % parameter in UFARSA: samples for estimating noise STD set in a non-random manner
    % parameter in UFARSA: opt.nSamplesForSTD was re-defined, see also changes in 'smoothing_UFARSA.m'
    opt.nSamplesForSTD = find(driftindex == 0);
    for k = finalROIs
        [output_UFARSA, opt_out, ~] = run_UFARSA(opt, DETECTION_CRITERION(:, k));
        UFARSA_output{k}.output_UFARSA = output_UFARSA;
        UFARSA_output{k}.opt_out = opt_out;
    end
    clear k output_UFARSA opt_out
    %
    %% Correct drift periods
    % UFARSA can generate false positive events at first frames of files and/or
    % non-drift periods. We therefore set all these frames to 1 in 'driftindex'
    % and re-define 'finalFrames' accordingly.
    %
    % add first frame after each drift period to driftindex
    driftindex = movmax(driftindex, [1, 0]);
    % add file onset frames to driftindex
    driftindex(FileOnsetFrames') = 1;
    finalFrames = find(driftindex == 0);
    %
    %% Output TXT (to be displayed with Clampfit)
    Npara = 5; % number of output parameters
    % (I)   UFASAR-demerged event times
    % (II)  UFASAR-smoothed DETECTION CRITERION
    % (III) DETECTION CRITERION
    % (IV)  DF/F0
    % (V)   drift periods
    Output = zeros(Nframes, Npara * Nrois); % Clampfit cannot handle NaNs.
    for k = finalROIs
        Output(:, (k-1) * Npara + 1) = UFARSA_output{k}.output_UFARSA.eTrain_dem';
        Output(:, (k-1) * Npara + 2) = UFARSA_output{k}.output_UFARSA.fluors.afterSmoothing';
        Output(:, (k-1) * Npara + 3) = UFARSA_output{k}.output_UFARSA.fluors.original';
        Output(:, (k-1) * Npara + 4) = cell2mat(Results_perROI{10, k});
    end
    %
    if sum(driftindex) > 0
        % Set output signals I to IV to zero for all drift periods
        Output(driftindex', :) = 0;
        % Add output signal V) drift periods
        for k = finalROIs
            Output(:, (k-1) * Npara + 5) = driftindex';
        end
    end
    dlmwrite([NEW_UFARSA.directory, options.FileNameOut, '_UFARSAevents_DCsmoothed_DC_DFF0_Drift_', options.timestamp, '_NEW_', NEW_UFARSA.timestamp, '.txt'], Output, '\t');
    disp(['Traces to be displayed with Clampfit were exported to: ', NEW_UFARSA.directory, options.FileNameOut, '_UFARSAevents_DCsmoothed_DC_DFF0_Drift_', options.timestamp, '_NEW_', NEW_UFARSA.timestamp, '.txt']);
    %
    %% Save MAT file
    % Group results into table
    Results_perROI{11, finalROIs} = num2cell(DETECTION_CRITERION(:, finalROIs), 1);
    % Note: Only values of 'output_UFARSA.eTrain_dem'' in row 12 of
    % 'Results_perROI' are set to NaN according to final 'driftindex'.
    for k = finalROIs
        aux = UFARSA_output{1, k}.output_UFARSA.eTrain_dem';
        % Set values within drift periods back to NaN
        % Set values at file frame onsets to NaN as UFARSA can generate false
        % positive events
        aux(driftindex') = NaN;
        Results_perROI{12, k} = num2cell(aux, 1);
        Results_perROI{13, k} = num2cell(UFARSA_output{1, k}.output_UFARSA.leading_thr);
        Results_perROI{14, k} = num2cell(UFARSA_output{1, k}.opt_out.smoothing_param);
    end
    % Save
    clear k aux Npara DETECTION_CRITERION y
    save([NEW_UFARSA.directory, options.FileNameOut, '_', options.timestamp, '_NEW_', NEW_UFARSA.timestamp, '_events.mat']);
    disp(['Matlab workspace was saved to: ', NEW_UFARSA.directory, options.FileNameOut, '_', options.timestamp, '_NEW_', NEW_UFARSA.timestamp, '_events.mat']);
end
clearvars
disp('Finished.')
%